#### SELECTION_SORT ####
#selection_sort ascending
a=[5,2,4,6,1,3]
for i in range(len(a)):
    min=i
    for j in range(i+1,len(a)):
        if a[j]<a[min]:
            min=j
    a[min],a[i]=a[i],a[min]
    print(a)
 
 # result
[1, 2, 4, 6, 5, 3]
[1, 2, 4, 6, 5, 3]
[1, 2, 3, 6, 5, 4]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]

#selection_sort descending
a=[5,2,4,6,1,3]
for i in range(len(a)):
    max=i
    for j in range(i+1,len(a)):
        if a[j]>a[max]:
            max=j
    a[max],a[i]=a[i],a[max]
    print(a)
    
#result
[6, 2, 4, 5, 1, 3]
[6, 5, 4, 2, 1, 3]
[6, 5, 4, 2, 1, 3]
[6, 5, 4, 3, 1, 2]
[6, 5, 4, 3, 2, 1]
[6, 5, 4, 3, 2, 1]

#### INSERTION SORT ####
a=[6,5,3,1,8,7,2,4]
for i in range(len(a)):
    cursor=a[i]
    pos=i
    while pos>=1 and a[pos-1]> cursor:
        a[pos]=a[pos-1]   # can't use a[pos-1]=a[pos] here, since that'll be copy a[pos]=cursor to every item before ith
        pos=pos-1
    a[pos]=cursor
    print(a)
    
#result
[6, 5, 3, 1, 8, 7, 2, 4]
[5, 6, 3, 1, 8, 7, 2, 4]
[3, 5, 6, 1, 8, 7, 2, 4]
[1, 3, 5, 6, 8, 7, 2, 4]
[1, 3, 5, 6, 8, 7, 2, 4]
[1, 3, 5, 6, 7, 8, 2, 4]
[1, 2, 3, 5, 6, 7, 8, 4]
[1, 2, 3, 4, 5, 6, 7, 8]

wrong when use a[pos-1] = a[pos]:
[5, 3, 3, 1, 8, 7, 2, 4]
[3, 3, 3, 1, 8, 7, 2, 4]
[3, 3, 1, 1, 8, 7, 2, 4]
[3, 1, 1, 1, 8, 7, 2, 4]
[1, 1, 1, 1, 8, 7, 2, 4]
[1, 1, 1, 1, 7, 7, 2, 4]
[1, 1, 1, 1, 7, 2, 2, 4]
[1, 1, 1, 1, 2, 2, 2, 4]

#### BUBBLE_SORT ####
a=[6,5,3,1,8,7,2,4]
for x in range(len(a)):
    for i in range(1,len(a)-x):
        while a[i-1]>a[i]:
            a[i-1],a[i]=a[i],a[i-1]
            print(a)
#result          
[5, 6, 3, 1, 8, 7, 2, 4]
[5, 3, 6, 1, 8, 7, 2, 4]
[5, 3, 1, 6, 8, 7, 2, 4]
[5, 3, 1, 6, 7, 8, 2, 4]
[5, 3, 1, 6, 7, 2, 8, 4]
[5, 3, 1, 6, 7, 2, 4, 8]
[3, 5, 1, 6, 7, 2, 4, 8]
[3, 1, 5, 6, 7, 2, 4, 8]
[3, 1, 5, 6, 2, 7, 4, 8]
[3, 1, 5, 6, 2, 4, 7, 8]
[1, 3, 5, 6, 2, 4, 7, 8]
[1, 3, 5, 2, 6, 4, 7, 8]
[1, 3, 5, 2, 4, 6, 7, 8]
[1, 3, 2, 5, 4, 6, 7, 8]
[1, 3, 2, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8]

#### MERGE_SORT ####
separate list into two sub-list, sorted sublist inside first, then merge sublist by one-by-one checking into final order
def mergesort(alist):
    if len(alist)>1:
        L=alist[:len(alist)//2]
        R=alist[len(alist)//2:]
        
        #recursion
        mergesort(L)
        mergesort(R)
        
        i=j=k=0
        
        while i < len(L) and j < len(R):
            if L[i]< R[j]:
                alist[k]=L[i]
                i=i+1
            elif R[j]<L[i]:
                alist[k]=R[j]
                j=j+1
            k=k+1
        while i < len(L): # means R is finished, j >=len(R)
            alist[k]=L[i]
            i=i+1
            k=k+1
        while j < len(R):
            alist[k]=R[j]
            j=j+1
            k=k+1
    return(alist)

#### #### MERGE_SORT and COUNT Split Inversion #### #### ####
Sort array and count how many inversion happen in the array.
eg:[1,3,5,2,4,6] has 3 inversions:[3,2],[5,2],[5,4]
Output: [1,2,3,4,5,6], 3 
#### #### #### #### #### #### #### #### #### #### #### ####
def mergesort_inversion2(a):
    if len(a)==1:
        return (0,a)    
    else:
        L=a[:len(a)//2]
        R=a[len(a)//2:]

        inv_l,L= mergesort_inversion2(L)
        inv_r,R=mergesort_inversion2(R)

        i=j=c=0
        s=[]
        while i<len(L) and j<len(R):
            if L[i]<R[j]:
                s.append(L[i])
                i+=1
            else:
                s.append(R[j])
                j+=1
                c=c+len(L[i:])  #reason why use +len(L[i:]), when R[j]<L[i], and R,L already sorted, means R[j] is << L[i,i+1,...] all 
        while i<len(L):         # numbers in L after i
            s.append(L[i])
            i+=1
        while j<len(R):
            s.append(R[j])
            j+=1
        
    return(c+inv_l+inv_r,s)
#### #### #### #### Reason why len(L[i:])
b=[1,5,6]
c=[2,3,4]

i=j=v=0
d=[]
while i <len(b) and j<len(c):
    if b[i]<=c[j]:
        d.append(b[i])
        i+=1
    else:
        d.append(c[j])
        j+=1
        v=v+len(b[i:])
        print(i,j,v,d)
while i<len(b):
    d.append(b[i])
    i+=1
while j<len(c):
    d.append(c[j])
    j+=1
print(i,j,v,d)

# result
1 1 2 [1, 2]
1 2 4 [1, 2, 3]
1 3 6 [1, 2, 3, 4]
3 3 6 [1, 2, 3, 4, 5, 6]

###########################
