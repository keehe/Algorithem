#### SELECTION_SORT ####
#selection_sort ascending
a=[5,2,4,6,1,3]
for i in range(len(a)):
    min=i
    for j in range(i+1,len(a)):
        if a[j]<a[min]:
            min=j
    a[min],a[i]=a[i],a[min]
    print(a)
 
 # result
[1, 2, 4, 6, 5, 3]
[1, 2, 4, 6, 5, 3]
[1, 2, 3, 6, 5, 4]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]

#selection_sort descending
a=[5,2,4,6,1,3]
for i in range(len(a)):
    max=i
    for j in range(i+1,len(a)):
        if a[j]>a[max]:
            max=j
    a[max],a[i]=a[i],a[max]
    print(a)
    
#result
[6, 2, 4, 5, 1, 3]
[6, 5, 4, 2, 1, 3]
[6, 5, 4, 2, 1, 3]
[6, 5, 4, 3, 1, 2]
[6, 5, 4, 3, 2, 1]
[6, 5, 4, 3, 2, 1]

#### INSERTION SORT ####
a=[6,5,3,1,8,7,2,4]
for i in range(len(a)):
    cursor=a[i]
    pos=i
    while pos>=1 and a[pos-1]> cursor:
        a[pos]=a[pos-1]   # can't use a[pos-1]=a[pos] here, since that'll be copy a[pos]=cursor to every item before ith
        pos=pos-1
    a[pos]=cursor
    print(a)
    
#result
[6, 5, 3, 1, 8, 7, 2, 4]
[5, 6, 3, 1, 8, 7, 2, 4]
[3, 5, 6, 1, 8, 7, 2, 4]
[1, 3, 5, 6, 8, 7, 2, 4]
[1, 3, 5, 6, 8, 7, 2, 4]
[1, 3, 5, 6, 7, 8, 2, 4]
[1, 2, 3, 5, 6, 7, 8, 4]
[1, 2, 3, 4, 5, 6, 7, 8]

wrong when use a[pos-1] = a[pos]:
[5, 3, 3, 1, 8, 7, 2, 4]
[3, 3, 3, 1, 8, 7, 2, 4]
[3, 3, 1, 1, 8, 7, 2, 4]
[3, 1, 1, 1, 8, 7, 2, 4]
[1, 1, 1, 1, 8, 7, 2, 4]
[1, 1, 1, 1, 7, 7, 2, 4]
[1, 1, 1, 1, 7, 2, 2, 4]
[1, 1, 1, 1, 2, 2, 2, 4]

#### BUBBLE_SORT ####
a=[6,5,3,1,8,7,2,4]
for x in range(len(a)):
    for i in range(1,len(a)-x):
        while a[i-1]>a[i]:
            a[i-1],a[i]=a[i],a[i-1]
            print(a)
#result          
[5, 6, 3, 1, 8, 7, 2, 4]
[5, 3, 6, 1, 8, 7, 2, 4]
[5, 3, 1, 6, 8, 7, 2, 4]
[5, 3, 1, 6, 7, 8, 2, 4]
[5, 3, 1, 6, 7, 2, 8, 4]
[5, 3, 1, 6, 7, 2, 4, 8]
[3, 5, 1, 6, 7, 2, 4, 8]
[3, 1, 5, 6, 7, 2, 4, 8]
[3, 1, 5, 6, 2, 7, 4, 8]
[3, 1, 5, 6, 2, 4, 7, 8]
[1, 3, 5, 6, 2, 4, 7, 8]
[1, 3, 5, 2, 6, 4, 7, 8]
[1, 3, 5, 2, 4, 6, 7, 8]
[1, 3, 2, 5, 4, 6, 7, 8]
[1, 3, 2, 4, 5, 6, 7, 8]
[1, 2, 3, 4, 5, 6, 7, 8]

#### MERGE_SORT ####
separate list into two sub-list, sorted sublist inside first, then merge sublist by one-by-one checking into final order
def mergesort(alist):
    if len(alist)>1:
        L=alist[:len(alist)//2]
        R=alist[len(alist)//2:]
        
        #recursion
        mergesort(L)
        mergesort(R)
        
        i=j=k=0
        
        while i < len(L) and j < len(R):
            if L[i]< R[j]:
                alist[k]=L[i]
                i=i+1
            elif R[j]<L[i]:
                alist[k]=R[j]
                j=j+1
            k=k+1
        while i < len(L): # means R is finished, j >=len(R)
            alist[k]=L[i]
            i=i+1
            k=k+1
        while j < len(R):
            alist[k]=R[j]
            j=j+1
            k=k+1
    return(alist)
