with open('C:/Users/Ryan/Desktop/Qi/Algorithm/Median.txt') as f:
    a=[int(x) for x in f]
f.close()

a[:5]

================

h_low=None
h_high=None

#set initial
def median_init():
    global h_low,h_high
    h_low=[]
    h_high=[]
    
def median_insert(x):
    global h_low,h_high
    
    # save negative number in h_low, so the heappop(h_low) will return the smallest in h_low which is negative, then it's the 
    #largest in h_low
    if (len(h_low)==0):
        heappush(h_low,-x)
    else:
        m=-h_low[0]
        if x>m:
            heappush(h_high,x)
            if len(h_high)>len(h_low):
                y=heappop(h_high) #best usage in heappop, return the smallest item in list
                heappush(h_low,-y)
        else:
            heappush(h_low,-x)
            if len(h_low) - len(h_high) >1:
                y=-heappop(h_low)
                heappush(h_high,y)
    return (-h_low[0])


median_init()
medians=[]
for i in a:
    num=int(i)
    median=median_insert(num)
    medians.append(median)
    #print(num,median,medians)

np.array(medians).sum()%10000
#1213

================== Global Variable ===========================
#
globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()

#
print_globvar()       # Prints 1 
#1

#
globvar
#1

========= heap function =====================================
t= [1, 3, 5, 7, 9,2, 4, 6, 8, 0]

heap=[]
for i in t:
    heappush(heap,i)
    print('heap after heappush',i,heap)

ordered=[]
while heap:
    ordered.append(heappop(heap))
    print(heap,ordered)

ordered

####
heap after heappush 1 [1]
heap after heappush 3 [1, 3]
heap after heappush 5 [1, 3, 5]
heap after heappush 7 [1, 3, 5, 7]
heap after heappush 9 [1, 3, 5, 7, 9]
heap after heappush 2 [1, 3, 2, 7, 9, 5]
heap after heappush 4 [1, 3, 2, 7, 9, 5, 4]
heap after heappush 6 [1, 3, 2, 6, 9, 5, 4, 7]
heap after heappush 8 [1, 3, 2, 6, 9, 5, 4, 7, 8]
heap after heappush 0 [0, 1, 2, 6, 3, 5, 4, 7, 8, 9]
[1, 3, 2, 6, 9, 5, 4, 7, 8] [0]
[2, 3, 4, 6, 9, 5, 8, 7] [0, 1]
[3, 6, 4, 7, 9, 5, 8] [0, 1, 2]
[4, 6, 5, 7, 9, 8] [0, 1, 2, 3]
[5, 6, 8, 7, 9] [0, 1, 2, 3, 4]
[6, 7, 8, 9] [0, 1, 2, 3, 4, 5]
[7, 9, 8] [0, 1, 2, 3, 4, 5, 6]
[8, 9] [0, 1, 2, 3, 4, 5, 6, 7]
[9] [0, 1, 2, 3, 4, 5, 6, 7, 8]
[] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
